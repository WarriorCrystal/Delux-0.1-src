// 
// Decompiled by Procyon v0.5.36
// 

package me.travis.wurstplus.wurstplustwo.hacks.exploit;

import me.travis.wurstplus.wurstplustwo.hacks.WurstplusCategory;
import me.travis.wurstplus.wurstplustwo.util.WurstplusTimer;
import me.travis.wurstplus.wurstplustwo.guiscreen.settings.WurstplusSetting;
import me.travis.wurstplus.wurstplustwo.hacks.WurstplusHack;

public class TimerSpeed extends WurstplusHack
{
    public WurstplusSetting autoOff;
    public WurstplusSetting timeLimit;
    public WurstplusSetting mode;
    public WurstplusSetting timerSpeed;
    public WurstplusSetting fastSpeed;
    public WurstplusSetting fastTime;
    public WurstplusSetting slowTime;
    public WurstplusSetting startFast;
    public float speed;
    private final WurstplusTimer timer;
    private final WurstplusTimer turnOffTimer;
    private boolean fast;
    
    public TimerSpeed() {
        super(WurstplusCategory.WURSTPLUS_EXPLOIT);
        this.autoOff = this.create("AutoOff", "AutoOff", false);
        this.timeLimit = this.create("Limit", "Limit", 250, 1, 2500);
        this.mode = this.create("Mode", "Mode", "NORMAL", this.combobox("NORMAL", "SWITCH"));
        this.timerSpeed = this.create("Speed", "Speed", 4.0, 0.10000000149011612, 20.0);
        this.fastSpeed = this.create("Fast", "Fast", 10.0, 0.10000000149011612, 100.0);
        this.fastTime = this.create("FastTime", "FastTime", 20, 1, 500);
        this.slowTime = this.create("SlowTime", "SlowTime", 20, 1, 500);
        this.startFast = this.create("StartFast", "StartFast", false);
        this.speed = 1.0f;
        this.timer = new WurstplusTimer();
        this.turnOffTimer = new WurstplusTimer();
        this.fast = false;
        this.name = "TimerSpeed";
        this.tag = "TimerSpeed";
        this.description = "Phobos Timer";
    }
    
    @Override
    protected void enable() {
        this.turnOffTimer.reset();
        this.speed = (float)this.timerSpeed.get_value(4.0);
        if (!this.startFast.get_value(false)) {
            this.timer.reset();
        }
    }
    
    @Override
    public void update() {
        if (this.autoOff.get_value(false) && this.turnOffTimer.passedMs(this.timeLimit.get_value(250))) {
            this.disable();
            return;
        }
        if (this.mode.in("NORMAL")) {
            this.speed = (float)this.timerSpeed.get_value(4.0);
            return;
        }
        if (!this.fast && this.timer.passedDms(this.slowTime.get_value(20))) {
            this.fast = true;
            this.speed = (float)this.fastSpeed.get_value(10.0);
            this.timer.reset();
        }
        if (this.fast && this.timer.passedDms(this.fastTime.get_value(20))) {
            this.fast = false;
            this.speed = (float)this.timerSpeed.get_value(4.0);
            this.timer.reset();
        }
    }
    
    @Override
    protected void disable() {
        this.speed = 1.0f;
        this.fast = false;
    }
}
