//Deobfuscated with https://github.com/PetoPetko/Minecraft-Deobfuscator3000 using mappings "1.12 stable mappings"!

// 
// Decompiled by Procyon v0.5.36
// 

package me.travis.wurstplus.wurstplustwo.hacks.exploit;

import java.io.Writer;
import java.io.PrintWriter;
import java.io.FileWriter;
import java.io.File;
import java.util.Iterator;
import me.travis.wurstplus.wurstplustwo.util.WurstplusMessageUtil;
import net.minecraft.entity.player.EntityPlayer;
import me.travis.wurstplus.wurstplustwo.hacks.WurstplusCategory;
import net.minecraft.util.math.Vec3d;
import net.minecraft.entity.Entity;
import java.util.HashMap;
import me.travis.wurstplus.wurstplustwo.hacks.WurstplusHack;

public class WurstplusCoordExploit extends WurstplusHack
{
    private HashMap<Entity, Vec3d> knownPlayers;
    private HashMap<String, Vec3d> tpdPlayers;
    private int numTicks;
    private int numForgetTicks;
    
    public WurstplusCoordExploit() {
        super(WurstplusCategory.WURSTPLUS_EXPLOIT);
        this.knownPlayers = new HashMap<Entity, Vec3d>();
        this.tpdPlayers = new HashMap<String, Vec3d>();
        this.numTicks = 0;
        this.numForgetTicks = 0;
        this.name = "Coord Exploit";
        this.tag = "CoordExploit";
        this.description = "find someone's coords";
    }
    
    @Override
    public void update() {
        if (this.numTicks >= 50) {
            this.numTicks = 0;
            for (final Entity entity : WurstplusCoordExploit.mc.world.loadedEntityList) {
                if (entity instanceof EntityPlayer && !entity.getName().equals(WurstplusCoordExploit.mc.player.getName())) {
                    final Vec3d playerPos = new Vec3d(entity.posX, entity.posY, entity.posZ);
                    if (this.knownPlayers.containsKey(entity) && Math.abs(this.knownPlayers.get(entity).distanceTo(playerPos)) > 50.0 && Math.abs(WurstplusCoordExploit.mc.player.getPositionVector().distanceTo(playerPos)) > 100.0 && (!this.tpdPlayers.containsKey(entity.getName()) || this.tpdPlayers.get(entity.getName()) != playerPos)) {
                        WurstplusMessageUtil.send_client_message("Player " + entity.getName() + " has tp'd to " + vectorToString(playerPos, false));
                        this.saveFile(vectorToString(playerPos, false), entity.getName());
                        this.knownPlayers.remove(entity);
                        this.tpdPlayers.put(entity.getName(), playerPos);
                    }
                    this.knownPlayers.put(entity, playerPos);
                }
            }
        }
        if (this.numForgetTicks >= 9000000) {
            this.tpdPlayers.clear();
        }
        ++this.numTicks;
        ++this.numForgetTicks;
    }
    
    public static String vectorToString(final Vec3d vector, final boolean includeY) {
        final StringBuilder builder = new StringBuilder();
        builder.append('(');
        builder.append((int)Math.floor(vector.x));
        builder.append(", ");
        if (includeY) {
            builder.append((int)Math.floor(vector.y));
            builder.append(", ");
        }
        builder.append((int)Math.floor(vector.z));
        builder.append(")");
        return builder.toString();
    }
    
    public void saveFile(final String pos, final String name) {
        try {
            final File file = new File("./WURSTPLUSTWO/coordexploit.txt");
            file.getParentFile().mkdirs();
            final PrintWriter writer = new PrintWriter(new FileWriter(file, true));
            writer.println("name: " + name + " coords: " + pos);
            writer.close();
        }
        catch (Exception ex) {}
    }
}
